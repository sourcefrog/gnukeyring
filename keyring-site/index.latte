{\page 
  \pageid=index \pagetitle=introduction
  \rcsid=\"$Id$\"
{
  {\h2 introduction}

  \keyring lets you securely store digital secret keys on your PalmOS
  (PalmPilot, Visor, WorkPad) handheld computer.  Many people use
  \keyring to store

  {\ul
    {\li Computer account passwords}
    {\li Credit card numbers}
    {\li GnuPG or PGP passphrases}
    {\li SKey one-time-pads}
    {\li Phone banking keywords}
  }

  {\h2 user's guide}

GNU Keyring stores records called "keys", each of which can contain 

{\ul 
  {\li A non-secret name for the key}
  {\li An account name}
  {\li A password}
  {\li The date the password was last changed}
  {\li Free-form notes}
}

The name is shown in the list view even when the database is
locked, so it should contain enough information to let you identify
the record, but nothing confidential.  If no name is assigned, a
stable unique ID is shown instead.

The keyring is secured by a {\em master password}.  To view or edit
records, you must enter the master password.  The master password may
be changed through the "Set Password" command in the list view.

For your convenience, the keyring can stay unlocked for a time
after you enter your master password.  You can configure this
behaviour through the "Preferences" command.  

The keyring always locks itself again when you switch to another
application.  This seems necessary for security, to make sure that the
encryption key is not kept unencrypted in memory and out of the
program's control.

When you need to set a password, GNU Keyring can generate a random
password of specified length, optionally including letters, numbers or
symbols.  Use the "Generate Password" command in the key edit form to
do this.

{\h2 security information}

This product contains no cryptographic algorithms.  It does call
through a standard system trap method into code that may already be 
present in your version of PalmOS.

In general, Palm application databases are not protected on the
Hotsync PC, even if they contain private records.  Confidential data
therefore is visible to anyone who can read that file on the PC.
However, GNU Keyring encrypts all data except when it is actually
being edited.

The master password is not stored in the database.  Instead, an
MD5 hash of the password and a random 32-bit salt is stored and
checked against entered values.

Records are protected by DES3-EDE-ECB encryption.  The first and
second 8-byte halves of an MD5 hash of the password as the two
keys.  8-byte blocks of the record (plus zero padding) are
processed in this fashion.

PalmOS does not have memory protection between applications: a
hostile application or PC-based conduit could read information from
inside the Keyring database.  Keeping records encrypted provides some
protection, but it is far from impossible.  GNU Keyring attempts to
overwrite memory containing sensitive data after use, but this only
gives partial protection.

The PalmOS pseudorandom number generator is used to generate
session keys and random passwords; it may be predictable.

You should only Hotsync to trusted computers.  It would be possible
to (for example) put a trojan on the PC that grabbed the handheld's
memory image, or that installed a trojan onto the handheld.

You can review the source of GNU Keyring, or rebuild it to get a
trusted binary. 


  {\h2 pc support}

  The database can be backed up using the normal Hotsync mechanism.

  {Andy Fyfe has written {\a
  \href=http://home.afyfe.com/~andy/keyring.html a script to dump out
  the contents of the database on a PC.}}
}
}