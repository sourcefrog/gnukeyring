-*- mode: text -*-

$Id$


======================================================================
Requirements

 * Can store personal-confidential information

 * Storage should not be the weakest link

 * Should be not-too-hard to decode on a PC, either using a custom
   program or writing one from this document.


Packed format of keyrecords:

strz name of record
encrypted:
  strz account name
  strz password
  strz notes
  ULONG days-since-1904 last change

It's OK for any of these fields to be empty.  If they are, we use
the record's unique ID in the list.

New fields may be added at the end.  Note that we must be careful when
parsing them, in case an error in encryption or elsewhere has broken
this format.

Keyrecords are stored unpacked in a KeyRecordType, with all
character pointers to strings allocated elsewhere on the card.

The first record is unencrypted.  After it's trailing NUL comes a
series of ECB DES3 blocks.

Deleted or archived records are always stored at the end of the
database.

Key records are stored encrypted by a random session key.  The session
key in turn is stored encrypted by the password in the application
info block.



Encryption strategies:

 * don't check any password
 * don't encrypt; check against system password
 * don't encrypt; check against category password
 * DES encryption with password
 * 3DES EDE encryption with password

We want to follow the Debian policy of not offering weak encryption:
if people don't use a reasonable strategy they don't get any
encryption.  For example we don't want to encrypt with a fixed key.

Whenever the master key changes or the strategy changes we may have to
unencrypt and reencrypt all the records in that category.

Perhaps optionally categories should require a password even to see
what records are in that category.

I haven't implemented any of this at the moment: it seems enough to
just use DES encryption and allow people to set an empty password if
they want that.



Storage of categories:
 
For each category, we want to store:
 
 - name of category
 - encryption strategy
 - timeout
 - other
 
This should go (I think) into the database's appinfo block, or at
least be referenced from there.
 
We want to have a way to check that the user enters the correct
password: if they make a typo it's much more friendly to just say
so than to try to decode the records and get garbage.
 
I think that's true.  Maybe showing garbage is cooler, but then the
record format will be damaged and in any case we don't want people
to be easily able to overwrite record unless they've entered the
right password.

However, we want to be careful not to compromise our encryption
scheme by doing this: it must not give away the password or allow a
known-plaintext attack.

Storing a secure hash of the password should be enough: we can hash
the entered password to check if it is correct.  If they match
correctly, we can go ahead and decrypt using that key.  Perhaps the
hash should contain some salt, so that attackers can't e.g. notice
that two categories have the same key?

Should we encrypt the records using the key itself?




----------------------------------------------------------------------
Password timeout:

The expiry time is stored in a global variable so that it can't be got
at through the preferences interface.  Each time we check it, we make
sure it's no more than the maximum time away, to cope with changes in
the clock.

It might be nice if the timeout applied across invocations of the
application -- that is, if you could switch to another app and back
and have no apparent change.  However, all the application's dynamic
memory goes away when it exits, so the only place it can keep data is
in the database or in preferences.  Both these locations are backed up
to the PC, so it's silly to store the secret key in there. 

So for the time being we'll just store it in dynamic memory and
require the user to re-enter their password if they switch out of the
app and come back.  This probably enhances security against people
picking up the handheld and poking around, I suppose.

We could try to make sure to remove the secret key before the data is
transferred.  That doesn't sound like such a good idea, as it would be
hard to be sure we'd covered everything.  If it turns out that
requiring the password every time is too inconvenient then we can try
doing something else.



----------------------------------------------------------------------
Encryption:

Calling the PalmOS functions is a good thing, because it makes the
code simpler and also probably makes it safe to re-export this code
from the USA.  This means we can only use DES and have to do a bit of
work to call it the right way, but that's OK.  

DES-EDE gives 2^112 possible encryption keys.  This is good enough,
though some algorithms allow larger keys.  However, since the only
secret here is the user's password it's the real limiting factor.

Reckon on about 6 bits of entropy per character, assuming they mix all
kinds of writable characters and avoid using pronouncable words.  To
get that many keys the user would have to enter a 20 character
password, which is asking a lot. 

So 3DES is probably quite sufficient -- it puts the likely weakest
link under the user's control.

I'm now inclined to encrypt records directly with a hash of the user's
password.  This hash can be kept in memory when the program is
unlocked, and scribbled out when it's locked again.  Actually, it will
have to last even when the app exits and restarts, because we stay
unlocked then even if timeout hasn't expired.  So probably we have to
put it in a chunk and keep a reference to it in a preference.  

We have to make sure the key and the hashed key are not stored
anywhere where they could be transferred to a PC.  So they can't go
into a preference or into the database.  This is a little hard -- I
think global variables are not preserved between invocations.

We leave the first part of the record -- the publicly-visible name --
unencrypted at the start.  This makes it easy to display and sort the
records even when they're locked.  We can even imagine a Global Find
implementation that works only over record names -- this might be
useful and reasonable.  Everything after that is encrypted.

This means we have to decrypt and re-encrypt all records when the user
changes their password.  That's pretty reasonable, for changing the
password ought to lock out anyone who knew the previous key.

We don't use the password itself as the key, but rather it's MD5
hash.  This gives 128 bits, so we have two 64-bit keys (though DES
will ignore the parity bits from each.)

It's supposed to be infeasible to derive this from the verification
hash.  I hope this is OK.

If we do just use the password, then probably it would be best to use
a hash of the password to spread the uncertainty in the password over
the whole encryption key.  For example, an MD5 hash would give a good
16-byte key to use with EDE (rather than EDE3).  

We will prompt for a password when creating a new database.

The PalmOS encryption functions work between memory buffers.  This
gives us the mild inconvenience of needing to use two temporary
buffers: we have to pack/unpack records to give buffers for editing,
and have to use database manager functions to write out to the
database, rather than just writing into a buffer.  This is harmless.



----------------------------------------------------------------------
Encryption in PalmOS:

Sample code:
    
    void KeyDB_StoreSessionKey(Char const *passwd, KeyringInfoPtr ki) {
        static const Byte src[8] = { 'm', 'a', 'r', 't', 'i', 'n', 0, 0 };
        static const Byte key[8] = { 0x42, 0, 0, 0, 0, 0, 0, 0 };
        Err err;
    
        err = EncDES((BytePtr) src, (BytePtr) key, ki->sessionKey, true);
    
        if (err)
    	App_ReportSysError("EncDES", err);
    }

On a PC, you can get the same result by

   openssl enc -des-ecb -K KEYHEX -in foo.bin

where foo.bin contains the 8-byte text and KEYHEX is a hex
representation of the key, with the first byte first.

This is cool: it gives use some confidence that the algorithm is
implemented properly.  As far as I can see, if it's returning the same
results it must be the genuine DES algorithm.

So, it looks like our only option is DES-ECB: we could build something
stronger, but then Keyring would not be exportable from the US,
and I'd like to have that if it's at all possible. 

The PalmOS function only encrypts one block at a time, so we need to
either do block chaining ourselves or just use ECB mode.  Probably the
first is better if it's not too hard.

Since the records we're encrypting will be relatively small and since
code simplicity is somewhat important it seems OK to use DES-EDE3-ECB
(as SSLeay and OpenSSL call it).

----------------------------------------------------------------------
Randomness:

"Practice random acts..." 

Quite possibly the PalmOS SysRandom function is not unpredictable
enough to keep everything safe.  Therefore perhaps at some point we
should implement our own hashed entropy pool.

There's some discussion in Schneier of the right way to implement
this: the Linux entropy device seems like a good start.



----------------------------------------------------------------------
Versioning

Palm apps are (apparently) allowed to get away with pretty spartan
support for backward and forward compatibility on the grounds of
keeping the app small.  The pigeon book suggests that the PC app do
that, but because our PC side probably won't be allowed to decode the
records this doesn't help much.  

Once we get past 1.0 we might consider storing the version in the
database or in a preference somewhere, and using it to convert.  If
the crypto stuff changes too much it may be hard to do the conversion,
however.


----------------------------------------------------------------------
Data leakage

It would be good to prevent secret data accumulating in the memory of
the handheld. 

The best solution is to scribble over buffers that have contained
secret data when we're done using them before they're returned to the
memory manager.

We will do OK in this respect by only writing encrypted data into the
long-lived database memory.  Although unencrypted secret data may
exist in the data heap it's much quite likely to be overwritten soon by
other applications, the OS, or by a soft reset than data in the
database.  This is not a guarantee.

The main exposure that's out of our control is the buffers allocated
for editing in the form.  

Without the PalmOS sourcecode we can't know whether it will allocate
new buffers, resize them, make copies or anything else.  However,
trusting that it will be lazy we can assume:

 * it won't copy the data anywhere else

 * the buffers won't shrink

We do need to make sure to scribble over the buffers when the form
goes away rather than just letting the form fields dispose of their
own memory.

If the user chooses to copy text to the clipboard that's their own
problem. 

 LocalWords:  KeyringInfo
